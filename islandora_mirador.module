<?php

/**
 * @file
 * Supports Islandora submodule islandora_mirador.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Config\ImmutableConfig;

use Drupal\islandora_mirador\IslandoraMiradorPluginPluginBase;
use Drupal\islandora_mirador\IslandoraMiradorPluginInterface;

/**
 * Implements hook_theme().
 */
function islandora_mirador_theme() {
  return [
    'mirador' => [
      'variables' => [
        'iiif_manifest_url' => NULL,
        'mirador_view_id' => NULL,
      ],
      'template' => 'mirador',
    ],
  ];
}

/**
 * Implements template_preprocess_*().
 */
function template_preprocess_mirador(&$variables) {
  $variables['mirador_view_id'] = Html::getUniqueId($variables['mirador_view_id']);
  $variables['#attached']['drupalSettings']['mirador_view_id'] = $variables['mirador_view_id'];

  /**
   * @var \Drupal\islandora_mirador\IslandoraMiradorPluginManager
   */
  $mirador_plugin_manager = \Drupal::service('plugin.manager.islandora_mirador');

  /**
   * @var \Drupal\Core\Config\ImmutableConfig
   */
  $config = Drupal::service('config.factory')->get('islandora_mirador.settings');

  $mirador_plugins = $mirador_plugin_manager->getDefinitions();
  $enabled_plugins = $config->get('mirador_enabled_plugins');
  $variables['#attached']['drupalSettings']['mirador_enabled_plugins'] = array_filter(array_values($enabled_plugins));

  $window_config = [];
  foreach ($mirador_plugins as $plugin_id => $plugin_definition) {
    if ($enabled_plugins[$plugin_id]) {
      $plugin_instance = $mirador_plugin_manager->createInstance($plugin_id);
      /**
       * @var Drupal\islandora_mirador\IslandoraMiradorPluginInterface
       */
      $plugin_instance->windowConfigAlter($window_config);
    }
  }
  $variables['#attached']['drupalSettings']['mirador_window_settings'] = $window_config;
}

/**
 * Define the supported types of installation.
 *
 * Ideally, this should move to plugin definitions, possibly having some
 * "provider" mechanism that could then inform the runtime of what plugins are
 * included in the given installation, but anyway.
 *
 * @return array[]
 *   An associative array mapping an ID for the installation type to an array
 *   containing:
 *   - name: A human-readable name for this type of installation; and,
 *   - description: A human-readable description for this type of installation.
 */
function _islandora_mirador_library_installation_types() {
  return [
    'libraries' => [
      'name' => \Drupal::t('Installation from your @lib directory', [
        '@lib' => '/libraries',
      ]),
      'description' => \Drupal::t('More specifically, from: @lib', [
        '@lib' => '/libraries/mirador/dist/main.js',
      ]),
    ],
    'remote.cdn.jsdelivr' => [
      'name' => \Drupal::t('CDN (JSDelivr)'),
      'description' => \Drupal::t('Reference from JSDelivr CDN.'),
    ],
    'remote.custom' => [
      'name' => \Drupal::t('Custom remote'),
      'description' => \Drupal::t('Acquire from a custom remote. NOTE: Such a remote has to be setup via configuration overrides.'),
    ]
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function islandora_mirador_library_info_alter(array &$libraries, $extension) {
  if ($extension == 'islandora_mirador') {
    /** @var \Drupal\Core\Config\ImmutableConfig $config */
    $config = \Drupal::service('config.factory')->get('islandora_mirador.settings');

    // Target the selected installation type by injecting it as a dependency.
    $installation_type = $config->get('installation_type');
    $libraries['mirador']['dependencies'][] = "islandora_mirador/mirador.{$installation_type}";

    // Apply any configuration to the target types. Presently, just expected to
    // contain the values a library might contain, that we then merge into the
    // library definitions.
    $installation_types = _islandora_mirador_library_installation_types();
    foreach ($installation_types as $type => $info) {
      $target_library = "mirador.{$type}";
      # XXX: Really, this installation_config stuff seems like a candidate for
      # config entities, especially if the installation type concept was made
      # into a plugin.
      $libraries[$target_library] = array_merge_recursive(
        $libraries[$target_library],
        $config->get("installation_config.{$type}") ?? []
      );
    }
  }
}
